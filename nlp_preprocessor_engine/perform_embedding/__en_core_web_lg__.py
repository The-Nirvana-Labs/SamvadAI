import spacy
import openai
import numpy as np
import os


def generate_sentence_embeddings(text):
    """
    Generates a sentence embedding for a given text using spaCy's pre-trained word embeddings.

    Args:
    text (str): A sentence to generate an embedding for.

    Returns:
    sentence_embedding (list): A list representing the sentence embedding as the mean of token embeddings.
    """
    nlp = spacy.load("en_core_web_lg")
    doc = nlp(text)
    # Remove stop words and punctuation
    filtered_tokens = [token for token in doc if not token.is_stop and not token.is_punct]
    # Compute sentence embedding as the mean of token embeddings
    embeddings = [token.vector for token in filtered_tokens]
    sentence_embedding = np.mean(embeddings, axis=0)
    return sentence_embedding.tolist()


def perform_embedding(embedding):
    """
    Performs a task using OpenAI's GPT-3 API based on the given sentence embedding.

    Args:
    - embedding (list): A list representing the sentence embedding to perform the task with.

    Returns:
    - response (str): A response generated by the GPT-3 API based on the input sentence embedding.
    """
    openai.api_key = os.getenv("OPENAI_API_KEY")
    prompt = "Perform a task using the following sentence embedding:\n" + str(embedding)
    response = openai.Completion.create(
        engine="davinci",
        prompt=prompt,
        temperature=0.5,
        max_tokens=256,
        n=1,
        stop=None,
    )
    return response.choices[0].text
