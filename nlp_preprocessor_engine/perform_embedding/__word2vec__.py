import openai
import numpy as np
from gensim.models import Word2Vec
import os


def generate_embeddings(text):
    """
    Generates embeddings for a given text using Word2Vec model.

    Args:
    - text (list): A list of words to generate embeddings for.

    Returns:
    - embeddings (list): A list of embeddings, where each embedding corresponds to a word in the input text.
                       If a word is not present in the model's vocabulary, the embedding is a zero vector.
    """
    # Load word2vec model
    model = Word2Vec(text, size=100, window=5, min_count=1, workers=4)
    # Generate embeddings
    embeddings = []
    for word in text:
        if word in model.wv.vocab:
            embeddings.append(model.wv[word])
        else:
            embeddings.append(np.zeros(100))  # pad with zeros if word not in vocab
    return embeddings


def perform_embedding(embeddings):
    """
    Performs a task using OpenAI's GPT-3 API based on the given embeddings.

    Args:
    embeddings (list): A list of embeddings to perform the task with.

    Returns:
    response (str): A response generated by the GPT-3 API based on the input embeddings.
    """
    openai.api_key = os.getenv("OPENAI_API_KEY")
    prompt = "Perform a task using the following embeddings:\n" + str(embeddings)
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=prompt,
        temperature=0.5,
        max_tokens=256,
        n=1,
        stop=None,
    )
    return response.choices[0].text
