import openai
from typing import List
import torch
import os
from sentence_transformers import SentenceTransformer


def generate_embeddings(sentences: List[str]) -> List[torch.Tensor]:
    """
    Generates embeddings for a list of sentences using the all-roberta-large-v1 model from SentenceTransformers.

    Args:
    - sentences (list): A list of strings representing sentences to generate embeddings for.

    Returns:
    - embeddings (list): A list of torch Tensors, where each tensor corresponds to an embedding for a sentence in the input list.
    """
    # Load all-roberta-large-v1 model
    model = SentenceTransformer('all-mpnet-base-v2')

    # Generate embeddings
    embeddings = model.encode(sentences, show_progress_bar=True)

    return embeddings


def perform_embedding(embedding):
    """
    Performs a task using OpenAI's GPT-3 API based on the given sentence embedding.

    Args:
    - embedding (list): A list representing the sentence embedding to perform the task with.

    Returns:
    - response (str): A response generated by the GPT-3 API based on the input sentence embedding.
    """
    openai.api_key = os.getenv("OPENAI_API_KEY")
    prompt = "Perform a task using the following sentence embedding:\n" + str(embedding)
    response = openai.Completion.create(
        engine="davinci",
        prompt=prompt,
        temperature=0.5,
        max_tokens=256,
        n=1,
        stop=None,
    )
    return response.choices[0].text
